// <auto-generated />
using System;
using HealthTracker.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace HealthTracker.Data.Migrations
{
    [DbContext(typeof(HealthTrackerDbContext))]
    [Migration("20250606151951_NutritionalValues")]
    partial class NutritionalValues
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.0");

            modelBuilder.Entity("HealthTracker.Entities.Food.Beverage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id");

                    b.Property<bool>("IsAlcohol")
                        .HasColumnType("INTEGER")
                        .HasColumnName("is_alcohol");

                    b.Property<bool>("IsHydrating")
                        .HasColumnType("INTEGER")
                        .HasColumnName("is_hydrating");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("VARCHAR(100)")
                        .HasColumnName("name");

                    b.Property<decimal>("TypicalABV")
                        .HasColumnType("TEXT")
                        .HasColumnName("typical_abv");

                    b.HasKey("Id");

                    b.ToTable("BEVERAGES", (string)null);
                });

            modelBuilder.Entity("HealthTracker.Entities.Food.BeverageConsumptionMeasurement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id");

                    b.Property<decimal>("ABV")
                        .HasColumnType("TEXT")
                        .HasColumnName("abv");

                    b.Property<int>("BeverageId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("beverage_id");

                    b.Property<DateTime>("Date")
                        .HasColumnType("DATETIME")
                        .HasColumnName("date");

                    b.Property<int>("PersonId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("person_id");

                    b.Property<int>("Quantity")
                        .HasColumnType("INTEGER")
                        .HasColumnName("quantity");

                    b.Property<decimal>("Volume")
                        .HasColumnType("TEXT")
                        .HasColumnName("volume");

                    b.HasKey("Id");

                    b.ToTable("BEVERAGE_CONSUMPTION", (string)null);
                });

            modelBuilder.Entity("HealthTracker.Entities.Food.BeverageMeasure", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("name");

                    b.Property<decimal>("Volume")
                        .HasColumnType("TEXT")
                        .HasColumnName("volume");

                    b.HasKey("Id");

                    b.ToTable("BEVERAGE_MEASURES", (string)null);
                });

            modelBuilder.Entity("HealthTracker.Entities.Food.FoodCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("VARCHAR(100)")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.ToTable("FOOD_CATEGORIES", (string)null);
                });

            modelBuilder.Entity("HealthTracker.Entities.Food.FoodSource", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("VARCHAR(100)")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.ToTable("FOOD_SOURCES", (string)null);
                });

            modelBuilder.Entity("HealthTracker.Entities.Food.NutritionalValue", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id");

                    b.Property<decimal?>("Calories")
                        .HasColumnType("TEXT")
                        .HasColumnName("calories");

                    b.Property<decimal?>("Carbohydrates")
                        .HasColumnType("TEXT")
                        .HasColumnName("carbohydrates");

                    b.Property<decimal?>("Fat")
                        .HasColumnType("TEXT")
                        .HasColumnName("fat");

                    b.Property<decimal?>("Fibre")
                        .HasColumnType("TEXT")
                        .HasColumnName("fibre");

                    b.Property<decimal?>("Protein")
                        .HasColumnType("TEXT")
                        .HasColumnName("protein");

                    b.Property<decimal?>("SaturatedFat")
                        .HasColumnType("TEXT")
                        .HasColumnName("saturated_fat");

                    b.Property<decimal?>("Sugar")
                        .HasColumnType("TEXT")
                        .HasColumnName("sugar");

                    b.HasKey("Id");

                    b.ToTable("NUTRITIONAL_VALUES", (string)null);
                });

            modelBuilder.Entity("HealthTracker.Entities.Identity.Person", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("DATETIME")
                        .HasColumnName("dob");

                    b.Property<string>("FirstNames")
                        .IsRequired()
                        .HasColumnType("VARCHAR(100)")
                        .HasColumnName("firstnames");

                    b.Property<int>("Gender")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("Height")
                        .HasColumnType("TEXT")
                        .HasColumnName("height");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnType("VARCHAR(100)")
                        .HasColumnName("surname");

                    b.HasKey("Id");

                    b.ToTable("PEOPLE", (string)null);
                });

            modelBuilder.Entity("HealthTracker.Entities.Identity.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("Password");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("UserName");

                    b.HasKey("Id");

                    b.ToTable("USER", (string)null);
                });

            modelBuilder.Entity("HealthTracker.Entities.Logging.JobStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id");

                    b.Property<DateTime?>("End")
                        .HasColumnType("DATETIME")
                        .HasColumnName("end");

                    b.Property<string>("Error")
                        .HasColumnType("TEXT")
                        .HasColumnName("error");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("name");

                    b.Property<string>("Parameters")
                        .HasColumnType("TEXT")
                        .HasColumnName("parameters");

                    b.Property<DateTime>("Start")
                        .HasColumnType("DATETIME")
                        .HasColumnName("start");

                    b.HasKey("Id");

                    b.ToTable("JOB_STATUS", (string)null);
                });

            modelBuilder.Entity("HealthTracker.Entities.Measurements.ActivityType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("VARCHAR(100)")
                        .HasColumnName("description");

                    b.Property<bool>("DistanceBased")
                        .HasColumnType("INTEGER")
                        .HasColumnName("distance_based");

                    b.HasKey("Id");

                    b.ToTable("ACTIVITY_TYPES", (string)null);
                });

            modelBuilder.Entity("HealthTracker.Entities.Measurements.BMIBand", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id");

                    b.Property<decimal>("MaximumBMI")
                        .HasColumnType("TEXT")
                        .HasColumnName("maximum_bmi");

                    b.Property<decimal>("MinimumBMI")
                        .HasColumnType("TEXT")
                        .HasColumnName("minimum_bmi");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("name");

                    b.Property<int>("Order")
                        .HasColumnType("INTEGER")
                        .HasColumnName("order");

                    b.HasKey("Id");

                    b.ToTable("BMI_BAND", (string)null);
                });

            modelBuilder.Entity("HealthTracker.Entities.Measurements.BloodGlucoseMeasurement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id");

                    b.Property<DateTime>("Date")
                        .HasColumnType("DATETIME")
                        .HasColumnName("date");

                    b.Property<decimal>("Level")
                        .HasColumnType("TEXT")
                        .HasColumnName("level");

                    b.Property<int>("PersonId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("person_id");

                    b.HasKey("Id");

                    b.ToTable("BLOOD_GLUCOSE", (string)null);
                });

            modelBuilder.Entity("HealthTracker.Entities.Measurements.BloodOxygenSaturationBand", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id");

                    b.Property<int>("MaximumAge")
                        .HasColumnType("INTEGER")
                        .HasColumnName("maximum_age");

                    b.Property<decimal>("MaximumSPO2")
                        .HasColumnType("TEXT")
                        .HasColumnName("maximum_spo2");

                    b.Property<int>("MinimumAge")
                        .HasColumnType("INTEGER")
                        .HasColumnName("minimum_age");

                    b.Property<decimal>("MinimumSPO2")
                        .HasColumnType("TEXT")
                        .HasColumnName("minimum_spo2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.ToTable("SPO2_BAND", (string)null);
                });

            modelBuilder.Entity("HealthTracker.Entities.Measurements.BloodOxygenSaturationMeasurement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id");

                    b.Property<DateTime>("Date")
                        .HasColumnType("DATETIME")
                        .HasColumnName("date");

                    b.Property<decimal>("Percentage")
                        .HasColumnType("TEXT")
                        .HasColumnName("percentage");

                    b.Property<int>("PersonId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("person_id");

                    b.HasKey("Id");

                    b.ToTable("SPO2_MEASUREMENT", (string)null);
                });

            modelBuilder.Entity("HealthTracker.Entities.Measurements.BloodPressureBand", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id");

                    b.Property<bool>("MatchAll")
                        .HasColumnType("INTEGER")
                        .HasColumnName("match_all");

                    b.Property<int>("MaximumDiastolic")
                        .HasColumnType("INTEGER")
                        .HasColumnName("maximum_diastolic");

                    b.Property<int>("MaximumSystolic")
                        .HasColumnType("INTEGER")
                        .HasColumnName("maximum_systolic");

                    b.Property<int>("MinimumDiastolic")
                        .HasColumnType("INTEGER")
                        .HasColumnName("minimum_diastolic");

                    b.Property<int>("MinimumSystolic")
                        .HasColumnType("INTEGER")
                        .HasColumnName("minimum_systolic");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("name");

                    b.Property<int>("Order")
                        .HasColumnType("INTEGER")
                        .HasColumnName("order");

                    b.HasKey("Id");

                    b.ToTable("BLOOD_PRESSURE_BAND", (string)null);
                });

            modelBuilder.Entity("HealthTracker.Entities.Measurements.BloodPressureMeasurement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id");

                    b.Property<DateTime>("Date")
                        .HasColumnType("DATETIME")
                        .HasColumnName("date");

                    b.Property<int>("Diastolic")
                        .HasColumnType("INTEGER")
                        .HasColumnName("diastolic");

                    b.Property<int>("PersonId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("person_id");

                    b.Property<int>("Systolic")
                        .HasColumnType("INTEGER")
                        .HasColumnName("systolic");

                    b.HasKey("Id");

                    b.ToTable("BLOOD_PRESSURE", (string)null);
                });

            modelBuilder.Entity("HealthTracker.Entities.Measurements.CholesterolMeasurement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id");

                    b.Property<DateTime>("Date")
                        .HasColumnType("DATETIME")
                        .HasColumnName("date");

                    b.Property<decimal>("HDL")
                        .HasColumnType("TEXT")
                        .HasColumnName("hdl");

                    b.Property<decimal>("LDL")
                        .HasColumnType("TEXT")
                        .HasColumnName("ldl");

                    b.Property<int>("PersonId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("person_id");

                    b.Property<decimal>("Total")
                        .HasColumnType("TEXT")
                        .HasColumnName("total");

                    b.Property<decimal>("Triglycerides")
                        .HasColumnType("TEXT")
                        .HasColumnName("triglycerides");

                    b.HasKey("Id");

                    b.ToTable("CHOLESTEROL", (string)null);
                });

            modelBuilder.Entity("HealthTracker.Entities.Measurements.ExerciseMeasurement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id");

                    b.Property<int>("ActivityTypeId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("activity_id");

                    b.Property<int>("Calories")
                        .HasColumnType("INTEGER")
                        .HasColumnName("calories");

                    b.Property<DateTime>("Date")
                        .HasColumnType("DATETIME")
                        .HasColumnName("date");

                    b.Property<decimal?>("Distance")
                        .HasColumnType("TEXT")
                        .HasColumnName("distance");

                    b.Property<int>("Duration")
                        .HasColumnType("INTEGER")
                        .HasColumnName("duration");

                    b.Property<int>("MaximumHeartRate")
                        .HasColumnType("INTEGER")
                        .HasColumnName("maximum_heart_rate");

                    b.Property<int>("MinimumHeartRate")
                        .HasColumnType("INTEGER")
                        .HasColumnName("minimum_heart_rate");

                    b.Property<int>("PersonId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("person_id");

                    b.HasKey("Id");

                    b.ToTable("EXERCISE", (string)null);
                });

            modelBuilder.Entity("HealthTracker.Entities.Measurements.WeightMeasurement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id");

                    b.Property<DateTime>("Date")
                        .HasColumnType("DATETIME")
                        .HasColumnName("date");

                    b.Property<int>("PersonId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("person_id");

                    b.Property<decimal>("Weight")
                        .HasColumnType("TEXT")
                        .HasColumnName("weight");

                    b.HasKey("Id");

                    b.ToTable("WEIGHT", (string)null);
                });

            modelBuilder.Entity("HealthTracker.Entities.Medications.Medication", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.ToTable("MEDICATION", (string)null);
                });

            modelBuilder.Entity("HealthTracker.Entities.Medications.PersonMedication", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id");

                    b.Property<bool>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(true)
                        .HasColumnName("active");

                    b.Property<int>("DailyDose")
                        .HasColumnType("INTEGER")
                        .HasColumnName("daily_dose");

                    b.Property<DateTime?>("LastTaken")
                        .HasColumnType("DATETIME")
                        .HasColumnName("date");

                    b.Property<int>("MedicationId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("medication_id");

                    b.Property<int>("PersonId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("person_id");

                    b.Property<int>("Stock")
                        .HasColumnType("INTEGER")
                        .HasColumnName("stock");

                    b.HasKey("Id");

                    b.ToTable("PERSON_MEDICATION", (string)null);
                });
#pragma warning restore 612, 618
        }
    }
}
