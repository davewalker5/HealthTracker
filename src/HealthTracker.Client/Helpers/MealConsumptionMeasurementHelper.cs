using System.Diagnostics.CodeAnalysis;
using HealthTracker.Client.Interfaces;
using HealthTracker.Entities.Food;
using Microsoft.Extensions.Logging;

namespace HealthTracker.Client.Helpers
{
    [ExcludeFromCodeCoverage]
    public class MealConsumptionMeasurementHelper : NutritionalValueHelper<MealConsumptionMeasurementHelper>, IMealConsumptionMeasurementHelper
    {
        private readonly IMealClient _mealClient;
        private readonly IMealConsumptionMeasurementClient _mealConsumptionMeasurementClient;

        public MealConsumptionMeasurementHelper(
            IMealClient mealClient,
            IMealConsumptionMeasurementClient mealConsumptionMeasurementClient,
            INutritionalValueClient nutritionalValueClient,
            ILogger<MealConsumptionMeasurementHelper> logger)
            : base(nutritionalValueClient, logger)
        {
            _mealClient = mealClient;
            _mealConsumptionMeasurementClient = mealConsumptionMeasurementClient;
        }

        /// <summary>
        /// Add a new meal consumption record with associated nutritional value
        /// </summary>
        /// <param name="personId"></param>
        /// <param name="mealId"></param>
        /// <param name="date"></param>
        /// <param name="quantity"></param>
        /// <returns></returns>
        public async Task<MealConsumptionMeasurement> AddAsync(int personId, int mealId, DateTime date, decimal quantity)
        {
            Logger.LogDebug(
                $"Adding new meal consumption record: Person ID = {personId}, " +
                $"Date = {date}, " +
                $"Meal ID = {mealId}, " +
                $"Quantity = {quantity}");

            // Add the consumption record without an associated nutritional value, to begin with. This will flush out errors generated by
            // adding the consumption record itself and won't create redundant nutritional value records
            var measurement = await _mealConsumptionMeasurementClient.AddAsync(personId, mealId, null, date, quantity);

            // Consumption record's now been added successfully, so we can add the nutritional value
            var nutritionalValue = await CalculateNutritionalValues(mealId, quantity);
            var nutritionalValueId = await AddNutritionalValue(nutritionalValue);

            // And, finally, associate the nutritional value record with the consumption record
            measurement = await _mealConsumptionMeasurementClient.UpdateAsync(
                measurement.Id, measurement.PersonId, measurement.MealId, nutritionalValueId, measurement.Date, measurement.Quantity);

            return measurement;
        }

        /// <summary>
        /// Update an existing meal consumption record and its associated nutritional values
        /// </summary>
        /// <param name="id"></param>
        /// <param name="personId"></param>
        /// <param name="mealId"></param>
        /// <param name="date"></param>
        /// <param name="quantity"></param>
        /// <returns></returns>
        public async Task<MealConsumptionMeasurement> UpdateAsync(int id, int personId, int mealId, DateTime date, decimal quantity)
        {
            Logger.LogDebug(
                $"Updating meal consumption record: ID = {id}, " +
                $"Person ID = {personId}, " +
                $"Date = {date}, " +
                $"Meal ID = {mealId}, " +
                $"Quantity = {quantity}");

            // Update the consumption record without an associated nutritional value, to begin with. This will flush out errors generated by
            // updating the consumption record itself and won't create redundant nutritional value records
            var measurement = await _mealConsumptionMeasurementClient.UpdateAsync(id, personId, mealId, null, date, quantity);

            // Calculate the nutritional values for this consumption record
            int? nutritionalValueId = null;
            var nutritionalValue = await CalculateNutritionalValues(mealId, quantity);

            if (((measurement.NutritionalValueId ?? 0) <= 0) && (nutritionalValue?.HasValues == true))
            {
                // New nutritional value record and it has values associated with it : Save it
                nutritionalValueId = await AddNutritionalValue(nutritionalValue);
            }
            else if (measurement.NutritionalValueId > 0)
            {
                // Existing nutritional value record : Update it or delete it, if it no longer has values
                nutritionalValueId = await UpdateNutritionalValueAsync(measurement.NutritionalValueId, nutritionalValue);
            }

            // If we still have a nutritional value, re-associate it with the meal
            if (nutritionalValueId > 0)
            {
                measurement = await _mealConsumptionMeasurementClient.UpdateAsync(id, personId, mealId, nutritionalValueId, date, quantity);
            }

            return measurement;
        }

        /// <summary>
        /// Calculate a set of nutritional values for a consumption record given a meal and quantity
        /// </summary>
        /// <param name="mealId"></param>
        /// <param name="quantity"></param>
        /// <returns></returns>
        private async Task<NutritionalValue> CalculateNutritionalValues(int mealId, decimal quantity)
        {
            NutritionalValue values = null;

            // Retrieve the meal
            var meal = await _mealClient.GetAsync(mealId);

            // If it has any nutritional values, use them and the quantity to build a set of values for the meal
            if (meal.NutritionalValue != null)
            {
                values = new()
                {
                    Calories = CalculateValue(meal.NutritionalValue.Calories, quantity),
                    Fat = CalculateValue(meal.NutritionalValue.Fat, quantity),
                    SaturatedFat = CalculateValue(meal.NutritionalValue.SaturatedFat, quantity),
                    Protein = CalculateValue(meal.NutritionalValue.Protein, quantity),
                    Carbohydrates = CalculateValue(meal.NutritionalValue.Carbohydrates, quantity),
                    Sugar = CalculateValue(meal.NutritionalValue.Sugar, quantity),
                    Fibre = CalculateValue(meal.NutritionalValue.Fibre, quantity)
                };
            }

            return values;
        }

        /// <summary>
        /// Calculate a nullable nutritional value from the base value and a quantity
        /// </summary>
        /// <param name="value"></param>
        /// <param name="quantity"></param>
        /// <returns></returns>
        private decimal? CalculateValue(decimal? value, decimal quantity)
            => value == null ? null : value * quantity;
    }
}