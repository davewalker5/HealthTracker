using System.Diagnostics.CodeAnalysis;
using HealthTracker.Client.Interfaces;
using HealthTracker.Entities.Food;
using Microsoft.Extensions.Logging;

namespace HealthTracker.Mvc.Helpers
{
    [ExcludeFromCodeCoverage]
    public class FoodItemHelper : IFoodItemHelper
    {
        private readonly IFoodItemClient _foodItemClient;
        private readonly INutritionalValueClient _nutritionalValueClient;
        private readonly ILogger<FoodItemHelper> _logger;

        public FoodItemHelper(IFoodItemClient foodItemClient, INutritionalValueClient nutritionalValueClient, ILogger<FoodItemHelper> logger)
        {
            _foodItemClient = foodItemClient;
            _nutritionalValueClient = nutritionalValueClient;
            _logger = logger;
        }

        /// <summary>
        /// Convenience wrapper to get a single food item given its ID
        /// </summary>
        /// <param name="id"></param>
        /// <returns></returns>
        public async Task<FoodItem> GetAsync(int id)
            => await _foodItemClient.GetAsync(id);

        /// <summary>
        /// Convenience wrapper to list existing food items
        /// </summary>
        /// <param name="foodCategoryId"></param>
        /// <param name="pageNumber"></param>
        /// <param name="pageSize"></param>
        /// <returns></returns>
        public async Task<List<FoodItem>> ListAsync(int foodCategoryId, int pageNumber, int pageSize)
            => await _foodItemClient.ListAsync(foodCategoryId, pageNumber, pageSize);

        /// <summary>
        /// Convenience wrapper to delete an existing food item and associated nutritional values
        /// </summary>
        /// <param name="id"></param>
        /// <returns></returns>
        public async Task DeleteAsync(int id)
            => await _foodItemClient.DeleteAsync(id);

        /// <summary>
        /// Add a new food item with associated nutritional value
        /// </summary>
        /// <param name="template"></param>
        /// <returns></returns>
        public async Task<FoodItem> AddAsync(FoodItem template)
        {
            _logger.LogDebug(
                $"Adding new food item: Food Category ID = {template.FoodCategoryId}, " +
                $"Name = {template.Name}, " +
                $"Portion = {template.Portion}");

            // Add the item without an associated nutritional value, to begin with. This will flush out errors generated by
            // adding the item itself and won't create redundant nutritional value records
            var item = await _foodItemClient.AddAsync(template.Name, template.Portion, template.FoodCategoryId, null);

            // Item's now been added successfully, so we can add the nutritional value
            var nutritionalValueId = await AddNutritionalValue(template.NutritionalValue);

            // And, finally, associate the nutritional value record with the food item
            item = await _foodItemClient.UpdateAsync(item.Id, item.Name, item.Portion, item.FoodCategoryId, nutritionalValueId);

            return item;
        }

        /// <summary>
        /// Update an existing food item and its associated nutritional values
        /// </summary>
        /// <param name="template"></param>
        /// <returns></returns>
        public async Task<FoodItem> UpdateAsync(FoodItem template)
        {
            _logger.LogDebug(
                $"Updating food item: ID = {template.Id}, " +
                $"Food Category ID = {template.FoodCategoryId}, " +
                $"Name = {template.Name}, " +
                $"Portion = {template.Portion}");

            // update the item without an associated nutritional value, to begin with. This will flush out errors generated by
            // updating the item itself and won't create redundant nutritional value records
            var item = await _foodItemClient.UpdateAsync(template.Id, template.Name, template.Portion, template.FoodCategoryId, null);

            _logger.LogDebug($"Template food item has Nutritional Value ID = {template.NutritionalValueId}");
            _logger.LogDebug($"Template nutritional values 'HasValues' = {template.NutritionalValue?.HasValues}");

            int? nutritionalValueId = null;
            if (((template.NutritionalValueId ?? 0) <= 0) && (template.NutritionalValue?.HasValues == true))
            {
                // New nutritional value record and it has values associated with it : Save it
                nutritionalValueId = await AddNutritionalValue(template.NutritionalValue);
            }
            else if (template.NutritionalValueId > 0)
            {
                // Existing nutritional value record : Update it or delete it, if it no longer has values
                nutritionalValueId = await UpdateNutritionalValueAsync(template.NutritionalValueId, template.NutritionalValue);
            }

            // If we still have a nutritional value, re-associate it with the food item
            if (nutritionalValueId > 0)
            {
                item = await _foodItemClient.UpdateAsync(item.Id, item.Name, item.Portion, item.FoodCategoryId, nutritionalValueId);
            }

            return item;
        }

        /// <summary>
        /// Add a nutritional value
        /// </summary>
        /// <param name="template"></param>
        /// <returns></returns>
        private async Task<int?> AddNutritionalValue(NutritionalValue template)
        {
            int? nutritionalValueId = null;

            if (template?.HasValues == true)
            {
                _logger.LogDebug($"Adding nutritional value record: Calories = {template?.Calories}, " +
                    $"Fat = {template?.Fat}, " +
                    $"Saturated Fat = {template?.SaturatedFat}, " +
                    $"Protein = {template?.Protein}, " +
                    $"Carbohydrates = {template?.Carbohydrates}, " +
                    $"Sugar = {template?.Sugar}, " +
                    $"Fibre = {template?.Fibre}");

                var added = await _nutritionalValueClient.AddAsync(
                    template.Calories,
                    template.Fat,
                    template.SaturatedFat,
                    template.Protein,
                    template.Carbohydrates,
                    template.Sugar,
                    template.Fibre);

                nutritionalValueId = added.Id;
            }

            return nutritionalValueId;
        }

        /// <summary>
        /// Update an existing nutritional value from the supplied template
        /// </summary>
        /// <param name="id"></param>
        /// <param name="template"></param>
        /// <returns></returns>
        private async Task<int?> UpdateNutritionalValueAsync(int? id, NutritionalValue template)
        {
            // Assess the state of the associated nutritional value:
            //
            // 1. Existing record, no longer has values => Delete it
            // 1. New record, has no values => No further action
            // 2. New Record, has values => Save it, then associate with the food item
            // 4. Existing record, has values => Update it
            if ((id > 0) && (template?.HasValues != true))
            {
                // Existing record but no longer has any values associated with it and can be deleted
                _logger.LogDebug($"Deleting nutritional value with ID {id}");
                await _nutritionalValueClient.DeleteAsync(id ?? 0);
                id = null;
            }
            else
            {
                // Existing record and still has values so needs to be updated
                _logger.LogDebug($"Updating nutritional value with ID {template.Id} : " +
                    $"Calories = {template.Calories}, " +
                    $"Fat = {template.Fat}, " +
                    $"Saturated Fat = {template.SaturatedFat}, " +
                    $"Protein = {template.Protein}, " +
                    $"Carbohydrates = {template.Carbohydrates}, " +
                    $"Sugar = {template.Sugar}, " +
                    $"Fibre = {template.Fibre}");

                _ = await _nutritionalValueClient.UpdateAsync(
                    id ?? 0,
                    template.Calories,
                    template.Fat,
                    template.SaturatedFat,
                    template.Protein,
                    template.Carbohydrates,
                    template.Sugar,
                    template.Fibre);
            }

            return id;
        }
    }
}