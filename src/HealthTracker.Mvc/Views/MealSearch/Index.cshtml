@using HealthTracker.Mvc.Entities
@using Microsoft.AspNetCore.Mvc.ModelBinding
@model HealthTracker.Mvc.Models.MealSearchViewModel

@{
    ViewData["Title"] = "Meal Search";
    var previousDisabled = (Model.PreviousEnabled) ? "" : "disabled";
    var nextDisabled = (Model.NextEnabled) ? "" : "disabled";
}

<p class="text-center font-weight-bold">
    <span style="font-size: 1.2rem">
        Meal Search
    </span>
    <br />
    <small class="text-muted">
        <em>
            Search for meals by name, ingredient or source
        </em>
    </small>
</p>

<div class="container-fluid">
    @using (Html.BeginForm())
    {
        @Html.AntiForgeryToken()<div class="row">
        @Html.HiddenFor(m => m.PageNumber)

        <div class="col">
            <strong>@Html.LabelFor(m => m.Criteria.FoodSourceId)</strong>
            <div class="input-group">
                @Html.DropDownListFor(m => m.Criteria.FoodSourceId, Model.Sources, new { @class = "form-control" })
            </div>
            <span>@Html.ValidationMessageFor(m => m.Criteria.FoodSourceId, "", new { @class = "text-danger" })</span>
            </div>
            <div class="col">
                <strong>@Html.LabelFor(m => m.Criteria.FoodCategoryId)</strong>
                <div class="input-group">
                    @Html.DropDownListFor(m => m.Criteria.FoodCategoryId, Model.Categories, new { @class = "form-control" })
                </div>
                <span>@Html.ValidationMessageFor(m => m.Criteria.FoodCategoryId, "", new { @class = "text-danger" })</span>
            </div>
            <div class="col">
                <strong>@Html.LabelFor(m => m.Criteria.MealName)</strong>
                <div class="input-group">
                    @Html.TextBoxFor(m => m.Criteria.MealName, new { @class = "form-control" })
                </div>
                <span>@Html.ValidationMessageFor(m => m.Criteria.MealName, "", new { @class = "text-danger" })</span>
            </div>
            <div class="col">
                <strong>@Html.LabelFor(m => m.Criteria.FoodItemName)</strong>
                <div class="input-group">
                    @Html.TextBoxFor(m => m.Criteria.FoodItemName, new { @class = "form-control" })
                </div>
                <span>@Html.ValidationMessageFor(m => m.Criteria.FoodItemName, "", new { @class = "text-danger" })</span>
            </div>
            <div class="col">
                <strong><label>&nbsp;</label></strong>
                <div class="input-group">
                    <button type="submit" name="Action" value="@ControllerActions.ActionSearch" class="btn btn-primary">Search</button>
                </div>
            </div>
        </div>
        <br />
        @if ((Model.Meals != null) && (Model.Meals.Count() > 0))
        {
            @await Html.PartialAsync("_MealList", Model)
            <hr />
            <p class="text-right">
                <button type="submit" name="Action" value="@ControllerActions.ActionPreviousPage" class="btn btn-secondary" @previousDisabled>Previous</button>
                <button type="submit" name="Action" value="@ControllerActions.ActionNextPage" class="btn btn-primary" @nextDisabled>Next</button>
            </p>
        }
        else if (Model.HasNoMatchingResults)
        {
            <hr />
            @Html.Raw("No matching meals")
        }
    }
</div>
